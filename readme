# 📓 Blogly

**Blogly** is a full-stack blog application built with the MERN stack (MongoDB, Express, React, Node.js). It features user authentication using JWT, allowing users to register, log in, create, edit, and delete blog posts securely.

## 🔧 Tech Stack

* **Frontend**: React, Axios, Tailwind CSS (or your preferred styling framework)
* **Backend**: Node.js, Express.js
* **Database**: MongoDB, Mongoose
* **Authentication**: JWT (JSON Web Tokens)
* **Other Tools**: dotenv, bcryptjs, CORS

---

## 🚀 Features

* User registration and login with JWT authentication
* Protected routes for creating/editing/deleting posts
* Responsive UI with a clean and minimal design
* RESTful API architecture
* Timestamps and author info for each blog post

---

## 📁 Folder Structure

```
blogly/
├── client/             # React frontend
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── App.js
│   │   └── index.js
├── server/             # Node/Express backend
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── .env
│   ├── server.js
```

---

## 🔐 Authentication Flow

1. User registers → server hashes password using bcrypt → token is generated via JWT.
2. On login, token is returned and stored on the client (e.g. in `localStorage`).
3. Protected routes use a middleware to verify the JWT on each request.

---

## 🛠️ Installation

### Prerequisites

* Node.js
* MongoDB
* npm or yarn

### Backend Setup

```bash
cd server
npm install
```

Create a `.env` file:

```env
PORT=5000
MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret_key
```

Start the backend:

```bash
npm run dev
```

### Frontend Setup

```bash
cd client
npm install
npm start
```

---

## 📬 API Endpoints

### Auth

| Method | Endpoint           | Description               |
| ------ | ------------------ | ------------------------- |
| POST   | /api/v1/user/register | Register a new user       |
| POST   | /api/v1/user/login    | Login user and return JWT |

### Posts

| Method | Endpoint        | Description                       |
| ------ | --------------- | --------------------------------- |
| GET    | /api/v1/blog/      | Get all blog posts                |
| GET    | /api/v1/blog/\:id | Get a single post                 |
| POST   | /api/v1/blog/create-blog     | Create new post *(auth required)* |
| PUT    | /api/v1/blog/update | Update post *(auth required)*     |
| DELETE | /api/v1/blog/delete | Delete post *(auth required)*     |

